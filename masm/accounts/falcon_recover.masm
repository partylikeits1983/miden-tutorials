use.miden::account
use.std::sys

#! Inputs:
#!   Operand stack: [ptr, PK, ...]
#!   Advice stack:  [tau0, tau1, h_0, ..., h_511, s2_0, ..., s2_511, pi_0, ..., pi_1022, ...]
#! Outputs:
#!   Operand stack: [PK]
export.get_signer

    # We will store in local addresses:
    # 1. 0..4 the public key,
    # 2. 4..8 the inverse of the evaluation point tau as [tau_inv0, tau_inv1, tau0, tau1].
    
    # 1) Set up the stack for loading the coefficients of the polynomials, evaluating and hashing them
    
    ## a) Set up the accumulator for `horner_eval_base` and the memory pointers
    push.0.0
    locaddr.4
    movup.3
    # => [ptr, tau_inv_ptr, 0, 0, PK, ...]

    ## b) Save PK to later compare it with the hash of the h polynomial
    swapw
    loc_storew.0
    # => [PK, ptr, tau_inv_ptr, acc1, acc0, ...]

    ## c) Prepare the capacity portion of the state of the hasher
    padw swapw
    # => [Y, 0, 0, 0, 0, ptr, tau_inv_ptr, acc1, acc0, ...], where Y is a "garbage" word

    ## d) Load the evaluation point tau from the advice tape, compute its inverse and save both
    ## Note that we will evaluate the polynomials at `tau_inv = tau^{-1}` as we are loading the coefficients
    ## in the normal order i.e., not in reversed order required for Horner evaluation.
    ## This means that the equality we will be checking is 
    ## pi(tau_inv) * tau^1023 == h(tau_inv) * tau^511 * s2(tau_inv) * tau^511
    ##
    ## which simplifies to
    ##
    ## pi(tau_inv) * tau == h(tau_inv) * s2(tau_inv)
    adv_push.2 
    dup.1 dup.1 ext2inv
    movup.3 movup.3
    loc_storew.4
    # => [tau1, tau0, tau_inv1, tau_inv0, Y, 0, 0, 0, 0, ptr, tau_inv_ptr, acc1, acc0, ...]

    # 2) Load the coefficients of the h polynomial and evaluate it at tau_inv
    repeat.64
        adv_pipe

        # check that all coefficients are less than Falcon prime
        dupw.1
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop

        dupw
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop
        u32assert2
        u32overflowing_sub.M assert drop
        u32overflowing_sub.M assert drop

        horner_eval_base

        hperm
    end

    push.333 debug.stack drop

end

# Inputs: []
# Outputs: [CURRENT_ROOT]
export.get_current_map_root
    # Getting the current root from slot 1
    push.1 exec.account::get_item
    # => [CURRENT_ROOT]

    exec.sys::truncate_stack
    # => [CURRENT_ROOT]
end
